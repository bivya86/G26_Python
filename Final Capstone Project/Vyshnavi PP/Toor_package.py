# -*- coding: utf-8 -*-
"""Toor package .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n_bcNnB70yjHrLRbnqaG_7Hbi1b-mqJi
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import random

data = pd.read_csv("/content/Travel.csv")
data.head()

df= data.copy() #making a copy to avoid changes to data
print(f"There are {df.shape[0]} rows and {df.shape[1]} columns.")
#checking the shape of the dataset
np.random.seed(15)
df.sample(10) #loading ran

df.info()

data.isna().sum()

data.dropna(inplace = True)

data.isna().sum()

data.describe()

data.info()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
for column in data.columns:
  if data[column].dtype == "object":
    data[column] = le.fit_transform(data[column])

data.info()

data.describe()

Uni_num = df.select_dtypes(include=np.number).columns.tolist()
plt.figure(figsize=(17,75))
for i in range(len(Uni_num)):     #creating a loop that will show the plots for the columns in one plot
    plt.subplot(18,3,i+1)
    sns.histplot(df[Uni_num[i]],kde=False)
    plt.tight_layout()
    plt.title(Uni_num[i],fontsize=25)

plt.show()

corr= df.corr()
plt.figure(figsize=(10,7))
sns.heatmap(corr,annot= True,vmin=0,vmax=0.7, cmap='RdYlGn_r',linewidths=0.75)
plt.show()

x, y = data.drop("MonthlyIncome",axis = 1), data["MonthlyIncome"]

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x,y, test_size = 0.25)

from sklearn.linear_model import LinearRegression, Lasso, Ridge

lr = LinearRegression().fit(xtrain, ytrain)
lasso = Lasso().fit(xtrain,ytrain)
ridge = Ridge().fit(xtrain,ytrain)

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor().fit(xtrain,ytrain)

model_names = ["LR","Lasso","Ridge","RandomForest"]
accuracy = [lr.score(xtest,ytest),lasso.score(xtest,ytest),ridge.score(xtest,ytest),rfr.score(xtest,ytest)]

import matplotlib.pyplot as plt

plt.bar(model_names, accuracy)

for i in range(len(model_names)):
  plt.text(i,accuracy[i],str(round(accuracy[i],2)),ha="center", bbox=dict(facecolor="wheat",alpha=0.5))

lr.score(xtrain, ytrain)

lasso.score(xtrain, ytrain)

rfr.score(xtrain, ytrain)

